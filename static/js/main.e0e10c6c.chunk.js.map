{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","app/app-reduser.tsx","utils/error-utils.ts","features/todoListsList/toDoListReduser.ts","features/todoListsList/taskReduser.ts","features/todoListsList/todoList/task/Task.tsx","features/todoListsList/todoList/TodoList.tsx","features/todoListsList/TodoListsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","api/initialazed-api.ts","features/login/loginReduser.ts","features/login/login.tsx","app/AppWithRedux.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","error","setError","title","setTitle","changeTitle","useCallback","e","currentTarget","value","addItem","trimmedTitle","trim","TextField","onChange","onKeyPress","key","variant","label","helperText","disabled","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","aria-disabled","entityTaskStatus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","todolistId","put","delete","request","taskId","then","res","model","Slice","createSlice","name","initialState","status","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","actions","appReducer","reducer","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","SliceToDo","changeTodolistEntityStatusAC","index","findIndex","tl","id","idToDoList","entityStatys","GetToDoListsAT","ApiToDoLists","map","filter","ChangeToDoListFilterAT","toDoListID","newFiltervalue","ChangeToDoListTitleAT","AddToDoListAT","unshift","addedDate","order","RemoveToDoListAT","todo","splice","ClearToDoAT","toDoListReduser","removeTaskAC","todolostId","task","addTaskAC","todoListId","changeEntityTaskStatusAC","toDoListId","updateTaskAC","getTasksAC","obj","extraReducers","builder","addCase","forEach","taskReduser","updateTaskThunkAT","getState","currentTask","tasks","find","reqest","description","priority","startDate","deadline","resultCode","catch","warn","Task","chahgeTaskStatus","newIsDoneValue","checked","Completed","New","idTodolist","chahgeTaskTitle","removeTask","Checkbox","Delete","TodoList","useSelector","todolists","useDispatch","useEffect","items","allToDoLists","allTask","taskForToDolist","i","deleteToDoList","setAllFilterValue","setFilter","setActiveFilterValue","setCompletedFilterValue","changeTitleTodoListHander","changeTitleTodoList","addTask","style","listStyle","padding","Button","size","TodoListsList","a","toDoLists","loged","login","isLoggedIn","addToDoList","toDoListTitle","newTitle","item","updateTodolistsThunkAT","toDolistId","setFilterValue","addTaskThunkAT","removeTaskThunkAT","todoListComponents","allToDoListTasks","Grid","Paper","elevation","container","spacing","to","Alert","ErrorSnackbar","progresLoad","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","initialazedAPI","initialazed","isLoggedInAC","isInitialazedAC","loginReduser","Login","initialValues","email","password","rememberMe","validationSchema","Yup","required","max","onSubmit","values","errors","touched","Box","margin","htmlFor","type","AppWithRedux","isLogout","CircularProgress","className","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0e10c6c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {UpdateTaskModelType} from \"../features/todoListsList/taskReduser\";\r\nimport {modelLoginStateType} from \"../features/login/loginReduser\";\r\nimport {number} from \"yup\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a40d8e19-8ad7-4404-b77e-7dea185478ff'\r\n    }\r\n})\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n// type ActionToDoListType<D> = {\r\n//     resultCode: number\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     data: D\r\n// }\r\nexport type TasksPostTypeResp <D = {}>= {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n    fieldsErrors: []\r\n}\r\n\r\nexport type ActionTaskType = {\r\n    totalCount: number | null\r\n    items: Array<TasksType>\r\n    error: string\r\n}\r\n\r\nexport type  TasksType = {\r\n    id: string\r\n    title:string\r\n    description: string,\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    deadline: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    startDate: string\r\n}\r\n\r\n\r\nexport type UpdateTaskRequestType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\nexport const todolistAPI = {\r\n\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    postTodolist( title: string) {\r\n        const promise = instance.post<TasksPostTypeResp<{ item: TodolistType }>>(`todo-lists`, {title: title})\r\n        return promise\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<TasksPostTypeResp<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<TasksPostTypeResp<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ActionTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    postTasks(todolistId: string, title: string) {\r\n        const promise = instance.post<TasksPostTypeResp<{item : TasksType}>>(`/todo-lists/${todolistId}/tasks`, {title: title})\r\n        return promise\r\n    },\r\n\r\n    updateTasks(todolistId: string, request: UpdateTaskModelType, taskId: string) {\r\n        return instance.put<TasksPostTypeResp<TasksType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, request).then(res => {\r\n                console.log(res)\r\n                return res\r\n            })\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<TasksPostTypeResp>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    fetchForm(model: modelLoginStateType) {\r\n        return instance.post<TasksPostTypeResp<{userId: number}>>(`/auth/login`, model)\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\nexport type addItemFormType = {\r\n    addItem: (title : string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nconst AddItemForm = React.memo(function (props: addItemFormType){\r\n    console.log('Add item form')\r\n\r\n    const [error, setError] = useState<string|null>(null)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n\r\n\r\n    const errorMessage = error ? <div>{error}</div> : null\r\n    const changeTitle = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    },[title, error] )\r\n\r\n    const addItem = useCallback (() => {\r\n        const trimmedTitle = title.trim()\r\n        if(trimmedTitle){\r\n            props.addItem(trimmedTitle)\r\n        }\r\n        else{\r\n            setError('Ошибка ввода')\r\n        }\r\n        setTitle('')\r\n    },[title, props.addItem, error] )\r\n\r\n    const onKeyPressAddItem = (e : KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === 'Enter'){\r\n            addItem()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                variant={'outlined'}\r\n                label={'Title'}\r\n                error = {!!error}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n\r\n\r\n            <IconButton onClick = {addItem} color={'primary'} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default AddItemForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/app-reduser\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    entityTaskStatus?: RequestStatusType\r\n}\r\n\r\nconst EditableSpan = React.memo(function (props: EditableSpanType){\r\n\r\n    console.log('add editable span')\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => props.entityTaskStatus !== 'loading' && setEditMode(true)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        const trimmedTitle = title.trim()\r\n        if(trimmedTitle){\r\n            props.changeTitle(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n    }\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                color={'primary'}\r\n                variant={'standard'}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span aria-disabled={props.entityTaskStatus === 'loading'} onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan","import { createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst Slice = createSlice({\r\n    name: 'AppSlice',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status : RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC (state, action: PayloadAction<{error : string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n})\r\nexport const {setAppStatusAC, setAppErrorAC} = Slice.actions\r\n\r\nexport const appReducer = Slice.reducer\r\n\r\n\r\n\r\n\r\n","import { Dispatch } from 'redux';\r\nimport {setAppErrorAC,  setAppStatusAC} from \"../app/app-reduser\";\r\nimport {TasksPostTypeResp} from \"../api/todolist-api\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: TasksPostTypeResp<T>, dispatch: Dispatch<any>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<any>) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FilterValuesType} from \"./todoList/TodoList\";\r\nimport {ToDoListDomainType} from \"./TodoListsList\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from \"../../app/app-reduser\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {log} from \"util\";\r\nimport {fetchTasksThunkAT} from \"./taskReduser\";\r\n\r\n\r\nexport type RemoveToDoListTypeAT = ReturnType<typeof RemoveToDoListAT>\r\nexport type AddToDoListTypeAT = ReturnType<typeof AddToDoListAT>\r\nexport type GetToDoListsTypeAT = ReturnType<typeof GetToDoListsAT>\r\n\r\nconst initialState: Array<ToDoListDomainType> = []\r\n\r\n\r\nexport const SliceToDo = createSlice({\r\n    name: 'ToDoListSlice',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ entityStatys: RequestStatusType, idToDoList: string }>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.idToDoList)\r\n            state[index].entityStatys = action.payload.entityStatys\r\n        },\r\n        GetToDoListsAT(state, action: PayloadAction<{ ApiToDoLists: Array<TodolistType> }>) {\r\n            return action.payload.ApiToDoLists.map((tl) => {\r\n                return {...tl, filter: 'all', entityStatys: \"idle\"}\r\n            })\r\n        },\r\n        ChangeToDoListFilterAT(state, action: PayloadAction<{ newFiltervalue: FilterValuesType, toDoListID: string }>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.toDoListID);\r\n            state[index].filter = action.payload.newFiltervalue\r\n        },\r\n        ChangeToDoListTitleAT(state, action: PayloadAction<{ title: string, toDoListID: string }>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.toDoListID);\r\n            state[index].title = action.payload.title\r\n        },\r\n        AddToDoListAT(state, action: PayloadAction<{ title: string, idToDoList: string }>) {\r\n            state.unshift({\r\n                id: action.payload.idToDoList,\r\n                title: action.payload.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0,\r\n                entityStatys: \"idle\"\r\n            })\r\n        },\r\n        RemoveToDoListAT(state, action: PayloadAction<{ toDoListID: string }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.toDoListID)\r\n            if (index !== -1) state.splice(index, 1)\r\n        },\r\n        ClearToDoAT(state, action) {\r\n           return []\r\n        },\r\n\r\n    },\r\n})\r\n\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    GetToDoListsAT,\r\n    ChangeToDoListFilterAT,\r\n    ChangeToDoListTitleAT,\r\n    AddToDoListAT,\r\n    RemoveToDoListAT,\r\n    ClearToDoAT\r\n} = SliceToDo.actions\r\n\r\nexport const toDoListReduser = SliceToDo.reducer;\r\n\r\nexport const fetchTodolistsThunkAT = () => async (dispatch: Dispatch<any>) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try{\r\n        const data = await todolistAPI.getTodolist()\r\n        dispatch(GetToDoListsAT({ApiToDoLists: data.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return data.data\r\n    }\r\n    catch (e) {\r\n        dispatch(setAppStatusAC({status: 'failed'}))\r\n    }\r\n    // todolistAPI.getTodolist()\r\n    //     .then(data => {\r\n    //             dispatch(GetToDoListsAT({ApiToDoLists: data.data}))\r\n    //             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    //             return data.data\r\n    //         }\r\n    //     )\r\n        // .then(data => {\r\n        //     debugger\r\n        //         data.forEach(i => dispatch(fetchTasksThunkAT(i.id)))\r\n        //     }\r\n        // )\r\n}\r\n\r\nexport const deleteTodolistsThunkAT = (toDolistId: string) => (dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({entityStatys: 'loading', idToDoList: toDolistId}))\r\n    todolistAPI.deleteTodolist(toDolistId)\r\n        .then(data => {\r\n                dispatch(RemoveToDoListAT({toDoListID: toDolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTodolistsThunkAT = (newTitle: string) => (dispatch: Dispatch<any>) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.postTodolist(newTitle)\r\n        .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(AddToDoListAT({title: data.data.data.item.title, idToDoList: data.data.data.item.id}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n                } else {\r\n                    handleServerAppError(data.data, dispatch)\r\n                }\r\n                return data\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .then(data => console.log(data))\r\n}\r\nexport const updateTodolistsThunkAT = (newTitle: string, toDoListId: string) => (dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.updateTodolist(toDoListId, newTitle)\r\n        .then(data => {\r\n                dispatch(ChangeToDoListTitleAT({title: newTitle, toDoListID: toDoListId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n","import {AddToDoListTypeAT, RemoveToDoListAT, GetToDoListsAT, SliceToDo, AddToDoListAT, ClearToDoAT} from \"./toDoListReduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, TaskStatuses, TasksType, todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from \"../../app/app-reduser\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst Slice = createSlice({\r\n    name: 'TaskSlice',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ todolostId: string, taskId: string }>) {\r\n            const index = state[action.payload.todolostId].findIndex(task => task.id === action.payload.taskId)\r\n            if (index !== -1) state[action.payload.todolostId].splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TasksType }>) {\r\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityTaskStatus: 'idle'})\r\n        },\r\n        changeEntityTaskStatusAC(state, action: PayloadAction<{ toDoListId: string, taskId: string, entityTaskStatus: any }>) {\r\n\r\n\r\n            const index = state[action.payload.toDoListId].findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) state[action.payload.toDoListId][index] = {\r\n                ...state[action.payload.toDoListId][index],\r\n                entityTaskStatus: action.payload.entityTaskStatus\r\n            }\r\n\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ toDoListId: string, taskId: string, model: UpdateTaskModelType }>) {\r\n\r\n            const index = state[action.payload.toDoListId].findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) state[action.payload.toDoListId][index] = {...state[action.payload.toDoListId][index], ...action.payload.model}\r\n\r\n        },\r\n        getTasksAC(state, action: PayloadAction<{ toDoListId: string, obj: TasksType[] }>) {\r\n            state[action.payload.toDoListId] = action.payload.obj.map((task: any) => ({\r\n                ...task,\r\n                entityTaskStatus: 'idle'\r\n            }))\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AddToDoListAT, (state, action: PayloadAction<{ title: string, idToDoList: string }>) => {\r\n            state[action.payload.idToDoList] = []\r\n        })\r\n        builder.addCase(GetToDoListsAT, (state, action: PayloadAction<{ ApiToDoLists: Array<TodolistType> }>) => {\r\n            action.payload.ApiToDoLists.forEach((tl: { id: string | number; }) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(RemoveToDoListAT, (state, action: PayloadAction<{ toDoListID: string }>) => {\r\n            delete state[action.payload.toDoListID]\r\n        })\r\n        builder.addCase(ClearToDoAT, (state, action) => {\r\n            return {}\r\n        })\r\n    }\r\n})\r\n\r\nexport const {getTasksAC, updateTaskAC, addTaskAC, changeEntityTaskStatusAC, removeTaskAC} = Slice.actions\r\n\r\nexport const taskReduser = Slice.reducer\r\n\r\n\r\n//\r\n// export const taskReduser = (state: TasksStateType = {}, action: any): TasksStateType => {\r\n//     switch (action.type) {\r\n//         case \"REMOVE_TASK\":\r\n//             let copySate = {...state}\r\n//             copySate[action.todolostId] = copySate[action.todolostId].filter(task => task.id !== action.taskId)\r\n//             return copySate\r\n//\r\n//         case \"GET-TASKS\":\r\n//             return {...state, [action.toDoListId]: action.obj.map((task: any) => ({...task, entityTaskStatus: 'idle'}))}\r\n//         case \"ADDTASK\":\r\n//             return {\r\n//                 ...state,\r\n//                 [action.task.todoListId]: [...state[action.task.todoListId], {...action.task, entityTaskStatus: 'idle'}]\r\n//             }\r\n//         case \"CHANGE-ENTITY-TASK-STATUS\":\r\n//             return {\r\n//                 ...state,\r\n//                 [action.toDoListId]: state[action.toDoListId].map(task => task.id === action.taskId ?\r\n//                     {...task, entityTaskStatus: action.entityTaskStatus} : task)\r\n//             }\r\n//         case \"UPDATE_TASK\":\r\n//             return {\r\n//                 ...state,\r\n//                 [action.toDoListId]: state[action.toDoListId].map(ts => ts.id === action.taskId ? {...ts, ...action.model} : ts)\r\n//             }\r\n//\r\n//         case \"ADD-TODOLIST\": {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.idToDoList]: []\r\n//             }\r\n//         }\r\n//         case \"GET-TODOLISTS\": {\r\n//             const stateCopy = {...state}\r\n//             action.ApiToDoLists.forEach((tl: { id: string | number; }) => {\r\n//                 stateCopy[tl.id] = []\r\n//             })\r\n//             return stateCopy\r\n//\r\n//         }\r\n//         case \"REMOVE-TODOLIST\": {\r\n//             let copyState = {...state};\r\n//             delete copyState[action.toDoListID]\r\n//             return copyState\r\n//         }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n//\r\n// export const removeTaskAC = (todolostId: string, taskId: string) => ({type: \"REMOVE_TASK\", todolostId, taskId} as const)\r\n// export const addTaskAC = (task: TasksType) => ({type: \"ADDTASK\", task}) as const\r\n// export const changeEntityTaskStatusAC = (toDoListId: string, taskId: string, entityTaskStatus: any) =>\r\n//     ({\r\n//         type: \"CHANGE-ENTITY-TASK-STATUS\",\r\n//         toDoListId,\r\n//         taskId,\r\n//         entityTaskStatus\r\n//     } as const)\r\n// export const updateTaskAC = (toDoListId: string, taskId: string, model: UpdateTaskModelType) => ({\r\n//     type: \"UPDATE_TASK\",\r\n//     toDoListId,\r\n//     taskId,\r\n//     model\r\n// } as const)\r\n// export const getTasksAC = (toDoListId: string, obj: TasksType[]) => ({type: 'GET-TASKS', toDoListId, obj}) as const\r\n\r\nexport const fetchTasksThunkAT = (toDoListId: string) => (dispatch: any) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.getTasks(toDoListId)\r\n        .then(data => {\r\n                dispatch(getTasksAC({toDoListId: toDoListId, obj: data.data.items}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        )\r\n}\r\nexport const removeTaskThunkAT = (toDoListId: string, taskId: string) => (dispatch: any) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeEntityTaskStatusAC({toDoListId: toDoListId, taskId: taskId, entityTaskStatus: 'loading'}))\r\n    todolistAPI.deleteTasks(toDoListId, taskId)\r\n        .then(data => {\r\n                dispatch(removeTaskAC({todolostId: toDoListId, taskId: taskId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                // dispatch(changeEntityTaskStatusAC({toDoListId: toDoListId, taskId: taskId, entityTaskStatus: 'succeeded'}))\r\n            }\r\n        )\r\n}\r\nexport const addTaskThunkAT = (toDoListId: string, title: string) => (dispatch: any) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.postTasks(toDoListId, title)\r\n        .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(addTaskAC({task: data.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(data.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const updateTaskThunkAT = (\r\n    toDoListId: string,\r\n    taskId: string,\r\n    model: UpdateTaskModelType\r\n) => (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    let state = getState().tasks\r\n    let currentToDoList = state[toDoListId]\r\n    let currentTask = currentToDoList.find(task => (task.id === taskId))\r\n\r\n    if (currentTask) {\r\n        let reqest = {\r\n            title: currentTask.title,\r\n            description: currentTask.description,\r\n            status: currentTask.status,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            deadline: currentTask.deadline,\r\n            entityTaskStatus: currentTask.entityTaskStatus,\r\n            ...model\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeEntityTaskStatusAC({toDoListId: toDoListId, taskId: taskId, entityTaskStatus: 'loading'}))\r\n        todolistAPI.updateTasks(toDoListId, reqest, taskId)\r\n            .then(data => {\r\n\r\n                    if (data.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC({toDoListId: toDoListId, taskId: taskId, model: model}))\r\n                        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                        dispatch(changeEntityTaskStatusAC({toDoListId, taskId, entityTaskStatus: 'succeeded'}))\r\n                    } else {\r\n                        handleServerAppError(data.data, dispatch)\r\n                    }\r\n                }\r\n            )\r\n            .catch((error) => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    } else {\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n}\r\n\r\n// export type changeEntityTaskStatusACType = ReturnType<typeof changeEntityTaskStatusAC>\r\n\r\n// type ActionType =\r\n//     | ReturnType<typeof removeTaskAC>\r\n//     | ReturnType<typeof addTaskAC>\r\n//     | ReturnType<typeof updateTaskAC>\r\n//     | ReturnType<typeof getTasksAC>\r\n//     | AddToDoListTypeAT\r\n//     | RemoveToDoListTypeAT\r\n//     | GetToDoListsTypeAT\r\n//     // | setAppStatusACType\r\n//     // | setAppErrorACType\r\n//     | changeEntityTaskStatusACType\r\n\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksDomainType>\r\n}\r\n\r\nexport type TasksDomainType = TasksType & {\r\n    entityTaskStatus: RequestStatusType\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksType} from \"../../../../api/todolist-api\";\r\nimport {TasksDomainType} from \"../../taskReduser\";\r\n\r\n\r\nexport type TasksPropsType = {\r\n    idTodolist: string\r\n    task:  TasksDomainType\r\n    removeTask: (toDoListId: string, taskId: string) => void\r\n    chahgeTaskTitle: (toDoListId: string, taskId: string, newTitle: string) => void\r\n    chahgeTaskStatus: (toDoListId: string, taskId: string, status: TaskStatuses) => void\r\n}\r\n\r\nconst Task = React.memo((props: TasksPropsType) => {\r\n    console.log('add task')\r\n\r\n    const chahgeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        props.chahgeTaskStatus(props.idTodolist, props.task.id, newIsDoneValue)\r\n    }, [props.idTodolist, props.task.id])\r\n\r\n\r\n    const chahgeTaskTitle = useCallback((title: string) => props.chahgeTaskTitle(props.idTodolist, props.task.id, title), [props.idTodolist, props.task.id])\r\n    const removeTask = useCallback(() => props.removeTask(props.idTodolist, props.task.id), [props.idTodolist, props.task.id])\r\n\r\n\r\n    return (\r\n        <li key={props.task.id}>\r\n\r\n            <Checkbox\r\n                color={'primary'}\r\n                onChange={chahgeTaskStatus}\r\n                checked={props.task.status == TaskStatuses.Completed}\r\n                disabled={props.task.entityTaskStatus === 'loading'}\r\n            />\r\n\r\n            <EditableSpan\r\n                title={props.task.title}\r\n                changeTitle={chahgeTaskTitle}\r\n                entityTaskStatus={props.task.entityTaskStatus}\r\n            />\r\n            <IconButton onClick={removeTask} disabled={props.task.entityTaskStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </li>\r\n    )\r\n})\r\n\r\nexport default Task","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, CircularProgress, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {addTaskThunkAT, fetchTasksThunkAT, removeTaskThunkAT, TasksDomainType} from \"../taskReduser\";\r\nimport {ChangeToDoListFilterAT, deleteTodolistsThunkAT, updateTodolistsThunkAT} from \"../toDoListReduser\";\r\nimport Task from \"./task/Task\";\r\nimport {TaskStatuses, TasksType, todolistAPI} from \"../../../api/todolist-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../app/app-reduser\";\r\nimport { AppRootStateType } from \"../../../app/store\";\r\n\r\n\r\ntype  PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    allTask: Array<TasksDomainType>\r\n    setFilter: (filter: FilterValuesType, toDoListId: string) => void\r\n    changeTitleTodoList: (title: string, toDoListId: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    deleteToDoList: (toDoListId: string) => void\r\n    removeTask: (toDoListId: string, taskId: string) => void\r\n    chahgeTaskTitle: (toDoListId: string, taskId: string, newTitle: string) => void\r\n    chahgeTaskStatus: (toDoListId: string, taskId: string, status: TaskStatuses) => void\r\n    demo?: boolean\r\n    entityStatys: RequestStatusType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nconst TodoList = React.memo((props: PropsType) => {\r\n    console.log('ToDoList')\r\n\r\n    const toDoListReduser = useSelector<AppRootStateType, any>(state => state.todolists)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunkAT(props.id))\r\n    }, [toDoListReduser])\r\n\r\n    let allToDoLists = props.allTask;\r\n    let taskForToDolist = allToDoLists;\r\n\r\n    if (props.filter == \"active\") {\r\n        taskForToDolist = allToDoLists.filter(tl => tl.status === TaskStatuses.New)\r\n    }\r\n\r\n    if (props.filter === \"completed\") {\r\n        taskForToDolist = allToDoLists.filter(tl => tl.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const task = taskForToDolist.map((i) => {\r\n\r\n            return (\r\n\r\n                <Task\r\n                    key={i.id}\r\n                    idTodolist={props.id}\r\n                    task={i}\r\n                    chahgeTaskStatus={props.chahgeTaskStatus}\r\n                    chahgeTaskTitle={props.chahgeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                />\r\n\r\n            )\r\n\r\n\r\n    })\r\n\r\n    const deleteToDoList = useCallback(() => props.deleteToDoList(props.id), [props.id]);\r\n\r\n    const setAllFilterValue = useCallback(() => {\r\n        props.setFilter('all', props.id)\r\n    }, [props.id])\r\n    const setActiveFilterValue = useCallback(() => {\r\n        props.setFilter('active', props.id)\r\n    }, [props.id])\r\n    const setCompletedFilterValue = useCallback(() => {\r\n        props.setFilter('completed', props.id)\r\n    }, [props.id])\r\n\r\n    const changeTitleTodoListHander = useCallback((title: string) => props.changeTitleTodoList(title, props.id), [props.id])\r\n    const addTask = useCallback(\r\n        (title: string) =>\r\n            props.addTask(props.id, title)\r\n        , [props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n\r\n                <EditableSpan\r\n                    title={props.title}\r\n                    changeTitle={changeTitleTodoListHander}\r\n\r\n                />\r\n\r\n                <IconButton onClick={deleteToDoList} disabled={props.entityStatys === 'loading'} >\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatys === 'loading'}/>\r\n\r\n\r\n            <ul style={{listStyle: 'none', padding: '0px'}}>\r\n\r\n\r\n                {task}\r\n\r\n\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n\r\n                    variant={props.filter == 'all' ? 'outlined' : 'contained'}\r\n                    // className={props.toDoListFilter == 'all' ? 'active-filter' : ''}\r\n                    onClick={setAllFilterValue}>\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={props.filter == 'active' ? 'outlined' : 'contained'}\r\n                    // className={props.toDoListFilter == 'active' ? 'active-filter' : '}\r\n                    onClick={setActiveFilterValue}>\r\n                    Active\r\n                </Button>\r\n                <Button\r\n\r\n                    size={\"small\"}\r\n                    variant={props.filter == 'completed' ? 'outlined' : 'contained'}\r\n                    // className={props.toDoListFilter == 'completed' ? 'active-filter' : ''}\r\n                    onClick={setCompletedFilterValue}>\r\n                    Completed\r\n                </Button>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n})\r\n\r\nexport default TodoList","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from 'react';\r\nimport '../../app/App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TaskStatuses, TodolistType} from \"../../api/todolist-api\";\r\nimport TodoList, {FilterValuesType} from \"./todoList/TodoList\";\r\nimport {\r\n    addTodolistsThunkAT, ChangeToDoListFilterAT,\r\n    deleteTodolistsThunkAT,\r\n    fetchTodolistsThunkAT,\r\n    updateTodolistsThunkAT\r\n} from \"./toDoListReduser\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTaskThunkAT, removeTaskThunkAT, TasksStateType, updateTaskThunkAT} from \"./taskReduser\";\r\nimport {RequestStatusType} from \"../../app/app-reduser\";\r\nimport {initialazedThunkAT} from \"../login/loginReduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport type ToDoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatys: RequestStatusType\r\n}\r\n\r\n\r\ntype todoListsType = {}\r\nconst TodoListsList: React.FC<todoListsType> = (props) => {\r\ndebugger\r\n    useEffect(() => {\r\n            dispatch(fetchTodolistsThunkAT())\r\n        },\r\n        [])\r\n\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListDomainType>>(state => state.todolists);\r\n    let task = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    let loged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const addToDoList = useCallback((toDoListTitle: string) => {\r\n        dispatch(addTodolistsThunkAT(toDoListTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodoList = useCallback((title: string, toDoListId: string) =>\r\n        dispatch(updateTodolistsThunkAT(title, toDoListId)), [])\r\n\r\n    const deleteToDoList = useCallback((toDoListId: string) => {\r\n        dispatch(deleteTodolistsThunkAT(toDoListId))\r\n    }, [])\r\n\r\n    const setFilterValue = useCallback((filter: FilterValuesType, toDoListId: string) => {\r\n        dispatch(ChangeToDoListFilterAT({newFiltervalue: filter, toDoListID: toDoListId}))\r\n    }, [])\r\n\r\n    const addTask = useCallback(\r\n        (toDoListId: string, title: string) =>\r\n            dispatch(addTaskThunkAT(toDoListId, title))\r\n        , [])\r\n\r\n    const chahgeTaskTitle = useCallback((toDoListId: string, taskId: string, newTitle: string) =>\r\n        dispatch(updateTaskThunkAT(toDoListId, taskId, {title: newTitle})), []);\r\n\r\n    const chahgeTaskStatus = useCallback((toDoListId: string, taskId: string, status: TaskStatuses) =>\r\n        dispatch(updateTaskThunkAT(toDoListId, taskId, {status: status})), [])\r\n\r\n    const removeTask = useCallback(\r\n        (toDoListId: string, taskId: string) =>\r\n            dispatch(removeTaskThunkAT(toDoListId, taskId))\r\n        , [])\r\n\r\n\r\n    const todoListComponents = toDoLists.map((tl) => {\r\n        let allToDoListTasks = task[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper key={tl.id} elevation={6} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        entityStatys={tl.entityStatys}\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        allTask={allToDoListTasks}\r\n                        setFilter={setFilterValue}\r\n                        changeTitleTodoList={changeTitleTodoList}\r\n                        addTask={addTask}\r\n                        deleteToDoList={deleteToDoList}\r\n                        removeTask={removeTask}\r\n                        chahgeTaskTitle={chahgeTaskTitle}\r\n                        chahgeTaskStatus={chahgeTaskStatus}\r\n\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    if (!loged) {\r\n        return <Redirect to='/login'/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px 0px\"}}>\r\n                <AddItemForm addItem={addToDoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListsList","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialStateType, setAppErrorAC} from \"../../app/app-reduser\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    // const [open, setOpen] = React.useState(true)\r\n    const dispatch = useDispatch();\r\n    const progresLoad = useSelector<AppRootStateType, InitialStateType>(state => state.app)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return  dispatch(setAppErrorAC({error: null}))\r\n        }\r\n            dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={progresLoad.error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {progresLoad.error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import axios from 'axios'\r\nimport {TasksPostTypeResp} from \"./todolist-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a40d8e19-8ad7-4404-b77e-7dea185478ff'\r\n    }\r\n})\r\n\r\n\r\nexport type initialazedDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const initialazedAPI = {\r\n\r\n    isLoged() {\r\n        return instance.get<TasksPostTypeResp <initialazedDataType>>(`/auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<TasksPostTypeResp >(`/auth/login`)\r\n    }\r\n}\r\n\r\n","import { setAppStatusAC} from \"../../app/app-reduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {todolistAPI} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {initialazedAPI} from \"../../api/initialazed-api\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { ClearToDoAT } from \"../todoListsList/toDoListReduser\";\r\n\r\nexport const initialState: initialStateLoginType = {\r\n    isLoggedIn: false,\r\n    initialazed: false\r\n};\r\n\r\nconst Slice = createSlice({\r\n    name: 'LoginSlice',\r\n    initialState: initialState,\r\n    reducers: {\r\n        isLoggedInAC(state, action: PayloadAction<{isLoggedIn: boolean}>){\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        },\r\n        isInitialazedAC(state, action: PayloadAction<{initialazed: boolean}>){\r\n            state.initialazed = action.payload.initialazed\r\n        }\r\n    }\r\n})\r\n\r\nexport const loginReduser = Slice.reducer\r\n\r\nexport const{isLoggedInAC, isInitialazedAC}  = Slice.actions\r\n\r\n\r\n\r\nexport const fetchFormThunkAT = (model: modelLoginStateType) => (dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatusAC({status :'loading'}))\r\n    todolistAPI.fetchForm(model)\r\n        .then(data => {\r\n            if (data.data.resultCode === 0) {\r\n                    dispatch(isLoggedInAC({isLoggedIn:true}))\r\n                    dispatch(setAppStatusAC({status :'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(data.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n}\r\n\r\nexport const initialazedThunkAT = () => (dispatch: Dispatch<any>) => {\r\n    dispatch(isInitialazedAC({initialazed: true}))\r\n\r\n    initialazedAPI.isLoged()\r\n        .then(data => {\r\n\r\n            if (data.data.resultCode === 0) {\r\n                dispatch(isInitialazedAC({initialazed: false}))\r\n                dispatch(isLoggedInAC({isLoggedIn: true}))\r\n                } else {\r\n                    handleServerAppError(data.data, dispatch)\r\n                dispatch(isInitialazedAC({initialazed: false}))\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n            // dispatch(isInitialazedAC(false))\r\n        })\r\n}\r\nexport const logoutThunkAT = () => (dispatch: Dispatch<any>) => {\r\n    dispatch(isInitialazedAC({initialazed: true}))\r\n    initialazedAPI.logOut()\r\n        .then(data => {\r\n            if (data.data.resultCode === 0) {\r\n                dispatch(ClearToDoAT({}))\r\n                dispatch(isLoggedInAC({isLoggedIn:false}))\r\n                dispatch(isInitialazedAC({initialazed: false}))\r\n                dispatch(setAppStatusAC({status :'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(data.data, dispatch)\r\n                dispatch(isInitialazedAC({initialazed: false}))\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n            dispatch(isInitialazedAC({initialazed: false}))\r\n        })\r\n}\r\n\r\nexport type initialStateLoginType = {\r\n    isLoggedIn: boolean\r\n    initialazed: boolean\r\n}\r\n\r\nexport type modelLoginStateType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n","import React from 'react';\r\nimport {useFormik, Field, ErrorMessage, Formik, Form} from 'formik';\r\nimport {Box, Button, FormControlLabel, Grid, Paper, Switch, TextField} from \"@material-ui/core\";\r\nimport * as Yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchFormThunkAT, initialStateLoginType} from \"./loginReduser\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {TasksStateType} from \"../todoListsList/taskReduser\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    let isLogin = useSelector<AppRootStateType, initialStateLoginType>(state => state.login);\r\n\r\n    if (isLogin.isLoggedIn) {\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            }}\r\n\r\n            validationSchema={Yup.object({\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                password: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required')\r\n\r\n            })}\r\n\r\n            onSubmit={(values) => {\r\n                dispatch(fetchFormThunkAT(values))\r\n            }}\r\n        >\r\n            {({errors, touched}) => (\r\n                <Form>\r\n\r\n                    <Paper elevation={3} style={{padding: '20px'}}>\r\n                        <Grid container style={{padding: \"20px 0px\"}}>\r\n\r\n                            <Grid container style={{padding: \"10px 0px\"}}>\r\n                                <Box margin={1}>\r\n                                    <label htmlFor=\"email\">enter email: lismgmk2@gmail.com  </label>\r\n                                    <Field name=\"email\" type=\"text\"/>\r\n                                    <ErrorMessage name=\"email\"/>\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                            <Grid container style={{padding: \"10px 0px\"}}>\r\n                                <Box margin={1}>\r\n                                    <label htmlFor=\"password\">enter password: '12345890'  </label>\r\n                                    <Field name=\"password\" type=\"password\"/>\r\n                                    <ErrorMessage name=\"password\"/>\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                            <Grid container style={{padding: \"10px 0px\"}}>\r\n                                <Box margin={1}>\r\n                                    <label htmlFor=\"rememberMe\">rememberMe </label>\r\n                                    <Field type=\"checkbox\" name=\"rememberMe\"/>\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                            <Button color=\"primary\" type=\"submit\" variant={'outlined'}>Submit</Button>\r\n\r\n                        </Grid>\r\n                    </Paper>\r\n                </Form>)}\r\n        </Formik>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport TodoListsList, {ToDoListDomainType} from \"../features/todoListsList/TodoListsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {InitialStateType, RequestStatusType} from \"./app-reduser\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/login/login\";\r\nimport {initialazedThunkAT, logoutThunkAT} from \"../features/login/loginReduser\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initialazedThunkAT())\r\n    }, [])\r\n\r\n\r\n    const isLogout = useCallback(() => {\r\n        dispatch(logoutThunkAT())\r\n    }, [])\r\n\r\n    const progresLoad = useSelector<AppRootStateType, InitialStateType>(state => state.app)\r\n    const initial = useSelector<AppRootStateType, boolean>(state => state.login.initialazed)\r\n\r\n    if (initial) {\r\n        return <CircularProgress color=\"secondary\"/>\r\n    }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button variant={'outlined'}\r\n                            color=\"inherit\"\r\n                            onClick={isLogout}\r\n                    >LogOut</Button>\r\n                </Toolbar>\r\n                {progresLoad.status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={\"/ToDoList\"} render={()=><TodoListsList/> }/>\r\n                    <Route exact path={\"/\"} render={()=><TodoListsList/> }/>\r\n                    <Route path={\"/login\"} render={()=><Login/>} />\r\n\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n\r\n                </Switch>\r\n\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {taskReduser} from \"../features/todoListsList/taskReduser\";\r\nimport {toDoListReduser} from \"../features/todoListsList/toDoListReduser\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reduser\";\r\nimport {loginReduser} from \"../features/login/loginReduser\";\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {CurriedGetDefaultMiddleware} from \"@reduxjs/toolkit/dist/getDefaultMiddleware\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReduser,\r\n    todolists: toDoListReduser,\r\n    app: appReducer,\r\n    login: loginReduser\r\n})\r\n// непосредственно создаём store\r\n\r\nexport const store = configureStore(\r\n    {\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n    }\r\n)\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./trash/App\";\r\nimport AppWithReduser from \"./trash/AppWithReduser\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppWithRedux/>\r\n            {/* <AppWithReduser/>*/}\r\n            {/*<App/>*/}\r\n        </Provider>\r\n    </BrowserRouter>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}